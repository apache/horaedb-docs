<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Horaedb on Apache HoraeDB</title><link>https://horaedb.apache.org/</link><description>Recent content in Horaedb on Apache HoraeDB</description><generator>Hugo</generator><language>en</language><atom:link href="https://horaedb.apache.org/index.xml" rel="self" type="application/rss+xml"/><item><title>Getting Started</title><link>https://horaedb.apache.org/docs/getting-started/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://horaedb.apache.org/docs/getting-started/</guid><description>This page shows you how to get started with HoraeDB quickly. You&amp;rsquo;ll start a standalone HoraeDB server, and then insert and read some sample data using SQL.
Start server HoraeDB docker image is the easiest way to get started, if you haven&amp;rsquo;t installed Docker, go there to install it first.
Note: please choose tag version &amp;gt;= v1.0.0, others are mainly for testing.
You can use command below to start a standalone server</description></item><item><title>NoMeta</title><link>https://horaedb.apache.org/docs/user-guide/cluster_deployment/no_meta/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://horaedb.apache.org/docs/user-guide/cluster_deployment/no_meta/</guid><description>Note: This feature is for testing use only, not recommended for production use, related features may change in the future.
This guide shows how to deploy a HoraeDB cluster without HoraeMeta, but with static, rule-based routing.
The crucial point here is that HoraeDB server provides configurable routing function on table name so what we need is just a valid config containing routing rules which will be shipped to every HoraeDB instance in the cluster.</description></item><item><title>Supported Platform</title><link>https://horaedb.apache.org/docs/dev/platform/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://horaedb.apache.org/docs/dev/platform/</guid><description>‰Ωú‰∏∫‰∏Ä‰∏™ÂºÄÊ∫êÁöÑÊï∞ÊçÆÂ∫ìÔºåHoraeDB ÂèØ‰ª•ÈÉ®ÁΩ≤Âú®Âü∫‰∫éËã±ÁâπÂ∞î /ARM Êû∂ÊûÑÁöÑÊúçÂä°Âô®Ôºå‰ª•ÂèäÂ∏∏ËßÅÁöÑËôöÊãüÁéØÂ¢É„ÄÇ
OS status Ubuntu LTS 16.06 or later ‚úÖ CentOS 7.3 or later ‚úÖ Red Hat Enterprise Linux 7.3 or later 7.x releases ‚úÖ macOS 11 or later ‚úÖ Windows ‚ùå Áîü‰∫ßÁéØÂ¢É‰∏ã , Linux ÊòØÈ¶ñÈÄâÂπ≥Âè∞„ÄÇ macOS ‰∏ªË¶ÅÁî®Âú®ÂºÄÂèëÁéØÂ¢É„ÄÇ</description></item><item><title>Conventional Commit Guide</title><link>https://horaedb.apache.org/docs/dev/conventional_commit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://horaedb.apache.org/docs/dev/conventional_commit/</guid><description>This document describes how we use conventional commit in our development.
Structure We would like to structure our commit message like this:
&amp;lt;type&amp;gt;[optional scope]: &amp;lt;description&amp;gt; There are three parts. type is used to classify which kind of work this commit does. scope is an optional field that provides additional contextual information. And the last field is your description of this commit.
Type Here we list some common types and their meanings.</description></item><item><title>Identifier</title><link>https://horaedb.apache.org/docs/user-guide/sql/identifier/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://horaedb.apache.org/docs/user-guide/sql/identifier/</guid><description>Identifier in HoraeDB can be used as table name, column name etc. It cannot be preserved keywords or start with number and punctuation symbols. HoraeDB allows to quote identifiers with back quotes (`). In this case it can be any string like 00_table or select.</description></item><item><title>WithMeta</title><link>https://horaedb.apache.org/docs/user-guide/cluster_deployment/with_meta/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://horaedb.apache.org/docs/user-guide/cluster_deployment/with_meta/</guid><description>This guide shows how to deploy a HoraeDB cluster with HoraeMeta. And with the HoraeMeta, the whole HoraeDB cluster will feature: high availability, load balancing and horizontal scalability if the underlying storage used by HoraeDB is separated service.
Deploy HoraeMeta Introduce HoraeMeta is one of the core services of HoraeDB distributed mode, it is used to manage and schedule the HoraeDB cluster. By the way, the high availability of HoraeMeta is ensured by embedding ETCD.</description></item><item><title>Compile</title><link>https://horaedb.apache.org/docs/dev/compile_run/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://horaedb.apache.org/docs/dev/compile_run/</guid><description>In order to compile HoraeDB, some relevant dependencies(including the Rust toolchain) should be installed.
Dependencies(Ubuntu20.04) Assuming the development environment is Ubuntu20.04, execute the following command to install the required dependencies:
sudo apt install git curl gcc g++ libssl-dev pkg-config cmake protobuf-compiler It should be noted that the compilation of the project has version requirements for dependencies such as cmake, gcc, g++, etc. If your development environment is an old Linux distribution, it is necessary to manually install these dependencies of a higher version.</description></item><item><title>Contribution Guidelines</title><link>https://horaedb.apache.org/docs/contribution-guidelines/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://horaedb.apache.org/docs/contribution-guidelines/</guid><description>Thank you for thinking of contributing! We very much welcome contributions from the community. To make the process easier and more valuable for everyone involved we have a few rules and guidelines to follow.
Submitting Issues and Feature Requests Before you file an issue, please search existing issues in case the same or similar issues have already been filed. If you find an existing open ticket covering your issue then please avoid adding &amp;ldquo;üëç&amp;rdquo; or &amp;ldquo;me too&amp;rdquo; comments; GitHub notifications can cause a lot of noise for the project maintainers who triage the back-log.</description></item><item><title>Utility Statements</title><link>https://horaedb.apache.org/docs/user-guide/sql/utility/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://horaedb.apache.org/docs/user-guide/sql/utility/</guid><description>There are serval utilities SQL in HoraeDB that can help in table manipulation or query inspection.
SHOW CREATE TABLE SHOW CREATE TABLE table_name; SHOW CREATE TABLE returns a CREATE TABLE DDL that will create a same table with the given one. Including columns, table engine and options. The schema and options shows in CREATE TABLE will based on the current version of the table. An example:
-- create one table CREATE TABLE `t` (a bigint, b int default 3, c string default &amp;#39;x&amp;#39;, d smallint null, t timestamp NOT NULL, TIMESTAMP KEY(t)) ENGINE = Analytic; -- Result: affected_rows: 0 -- show how one table should be created.</description></item><item><title>Options</title><link>https://horaedb.apache.org/docs/user-guide/sql/engine_options/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://horaedb.apache.org/docs/user-guide/sql/engine_options/</guid><description>Options below can be used when create table for analytic engine
enable_ttl, bool. When enable TTL on a table, rows older than ttl will be deleted and can&amp;rsquo;t be querid, default true
ttl, duration, lifetime of a row, only used when enable_ttl is true. default 7d.
storage_format, string. The underlying column&amp;rsquo;s format. Availiable values:
columnar, default hybrid, Note: This feature is still in development, and it may change in the future.</description></item><item><title>Scalar Functions</title><link>https://horaedb.apache.org/docs/user-guide/sql/scalar_functions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://horaedb.apache.org/docs/user-guide/sql/scalar_functions/</guid><description>HoraeDB SQL is implemented with DataFusion, Here is the list of scalar functions. See more detail, Refer to Datafusion
Math Functions Function Description abs(x) absolute value acos(x) inverse cosine asin(x) inverse sine atan(x) inverse tangent atan2(y, x) inverse tangent of y / x ceil(x) nearest integer greater than or equal to argument cos(x) cosine exp(x) exponential floor(x) nearest integer less than or equal to argument ln(x) natural logarithm log10(x) base 10 logarithm log2(x) base 2 logarithm power(base, exponent) base raised to the power of exponent round(x) round to nearest integer signum(x) sign of the argument (-1, 0, +1) sin(x) sine sqrt(x) square root tan(x) tangent trunc(x) truncate toward zero Conditional Functions Function Description coalesce Returns the first of its arguments that is not null.</description></item><item><title>Aggregate Functions</title><link>https://horaedb.apache.org/docs/user-guide/sql/aggregate_functions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://horaedb.apache.org/docs/user-guide/sql/aggregate_functions/</guid><description>HoraeDB SQL is implemented with DataFusion, Here is the list of aggregate functions. See more detail, Refer to Datafusion
General Function Description min Returns the minimum value in a numerical column max Returns the maximum value in a numerical column count Returns the number of rows avg Returns the average of a numerical column sum Sums a numerical column array_agg Puts values into an array Statistical Function Description var / var_samp Returns the variance of a given column var_pop Returns the population variance of a given column stddev / stddev_samp Returns the standard deviation of a given column stddev_pop Returns the population standard deviation of a given column covar / covar_samp Returns the covariance of a given column covar_pop Returns the population covariance of a given column corr Returns the correlation coefficient of a given column Approximate Function Description approx_distinct Returns the approximate number (HyperLogLog) of distinct input values approx_median Returns the approximate median of input values.</description></item><item><title>Release 2.0.0</title><link>https://horaedb.apache.org/blog/2024/release-2.0.0/</link><pubDate>Tue, 23 Apr 2024 00:00:00 +0000</pubDate><guid>https://horaedb.apache.org/blog/2024/release-2.0.0/</guid><description>Upgrade from 1.x.x to 2.0.0 The transition from CeresDB to Apache HoraeDB introduces several breaking changes. To facilitate upgrading from older versions to v2.0.0, specific alterations are necessary.
Upgrade Steps Setup required envs export HORAEDB_DEFAULT_CATALOG=ceresdb Update config Etcd&amp;rsquo;s root should be configured both in horaedb and horaemeta
For horaedb
[cluster_deployment.etcd_client] server_addrs = [&amp;#39;127.0.0.1:2379&amp;#39;] root_path = &amp;#34;/rootPath&amp;#34; For horaemeta
storage-root-path = &amp;#34;/rootPath&amp;#34; Upgrade horaemeta Horaedb will throw following errors, which is expected</description></item><item><title>ALTER TABLE</title><link>https://horaedb.apache.org/docs/user-guide/sql/ddl/alter_table/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://horaedb.apache.org/docs/user-guide/sql/ddl/alter_table/</guid><description>ALTER TABLE can change the schema or options of a table.
ALTER TABLE SCHEMA HoraeDB current supports ADD COLUMN to alter table schema.
-- create a table and add a column to it CREATE TABLE `t`(a int, t timestamp NOT NULL, TIMESTAMP KEY(t)) ENGINE = Analytic; ALTER TABLE `t` ADD COLUMN (b string); It now becomes:
-- DESCRIBE TABLE `t`; name type is_primary is_nullable is_tag t timestamp true false false tsid uint64 true false false a int false true false b string false true false ALTER TABLE OPTIONS HoraeDB current supports MODIFY SETTING to alter table schema.</description></item><item><title>Block List</title><link>https://horaedb.apache.org/docs/user-guide/operation/block_list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://horaedb.apache.org/docs/user-guide/operation/block_list/</guid><description>Add block list If you want to reject query for a table, you can add table name to &amp;lsquo;read_block_list&amp;rsquo;.
Example curl --location --request POST &amp;#39;http://localhost:5000/admin/block&amp;#39; \ --header &amp;#39;Content-Type: application/json&amp;#39; \ -d &amp;#39;{ &amp;#34;operation&amp;#34;:&amp;#34;Add&amp;#34;, &amp;#34;write_block_list&amp;#34;:[], &amp;#34;read_block_list&amp;#34;:[&amp;#34;my_table&amp;#34;] }&amp;#39; Response { &amp;#34;write_block_list&amp;#34;: [], &amp;#34;read_block_list&amp;#34;: [&amp;#34;my_table&amp;#34;] } Set block list You can use set operation to clear exist tables and set new tables to &amp;lsquo;read_block_list&amp;rsquo; like following example.
Example curl --location --request POST &amp;#39;http://localhost:5000/admin/block&amp;#39; \ --header &amp;#39;Content-Type: application/json&amp;#39; \ -d &amp;#39;{ &amp;#34;operation&amp;#34;:&amp;#34;Set&amp;#34;, &amp;#34;write_block_list&amp;#34;:[], &amp;#34;read_block_list&amp;#34;:[&amp;#34;my_table1&amp;#34;,&amp;#34;my_table2&amp;#34;] }&amp;#39; Response { &amp;#34;write_block_list&amp;#34;: [], &amp;#34;read_block_list&amp;#34;: [&amp;#34;my_table1&amp;#34;, &amp;#34;my_table2&amp;#34;] } Remove block list You can remove tables from &amp;lsquo;read_block_list&amp;rsquo; like following example.</description></item><item><title>Cluster Operation</title><link>https://horaedb.apache.org/docs/user-guide/operation/horaemeta/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://horaedb.apache.org/docs/user-guide/operation/horaemeta/</guid><description>The Operations for HoraeDB cluster mode, it can only be used when HoraeMeta is deployed.
Operation Interface You need to replace 127.0.0.1 with the actual project path.
Query table When tableNames is not empty, use tableNames for query. When tableNames is empty, ids are used for query. When querying with ids, schemaName is useless. curl --location &amp;#39;http://127.0.0.1:8080/api/v1/table/query&amp;#39; \ --header &amp;#39;Content-Type: application/json&amp;#39; \ -d &amp;#39;{ &amp;#34;clusterName&amp;#34;:&amp;#34;defaultCluster&amp;#34;, &amp;#34;schemaName&amp;#34;:&amp;#34;public&amp;#34;, &amp;#34;names&amp;#34;:[&amp;#34;demo1&amp;#34;, &amp;#34;__demo1_0&amp;#34;], }&amp;#39; curl --location &amp;#39;http://127.</description></item><item><title>CREATE TABLE</title><link>https://horaedb.apache.org/docs/user-guide/sql/ddl/create_table/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://horaedb.apache.org/docs/user-guide/sql/ddl/create_table/</guid><description>Basic syntax Basic syntax:
CREATE TABLE [IF NOT EXISTS] table_name ( column_definitions ) [partition_options] ENGINE = engine_type [WITH ( table_options )]; Column definition syntax:
column_name column_type [[NOT] NULL] [TAG | TIMESTAMP KEY | PRIMARY KEY] [DICTIONARY] [COMMENT &amp;#39;&amp;#39;] Partition options syntax:
PARTITION BY KEY (column_list) [PARTITIONS num] Table options syntax are key-value pairs. Value should be quoted with quotation marks ('). E.g.:
... WITH ( enable_ttl=&amp;#39;false&amp;#39; ) IF NOT EXISTS Add IF NOT EXISTS to tell HoraeDB to ignore errors if the table name already exists.</description></item><item><title>Data Types</title><link>https://horaedb.apache.org/docs/user-guide/sql/model/data_types/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://horaedb.apache.org/docs/user-guide/sql/model/data_types/</guid><description>HoraeDB implements table model, and the supported data types are similar to MySQL. The following table lists the mapping relationship between MySQL and HoraeDB.
Support Data Type(case-insensitive) SQL HoraeDB null Null timestamp Timestamp double Double float Float string String Varbinary Varbinary uint64 UInt64 uint32 UInt32 uint16 UInt16 uint8 UInt8 int64/bigint Int64 int32/int Int32 int16/smallint Int16 int8/tinyint Int8 boolean Boolean date Date time Time</description></item><item><title>DROP TABLE</title><link>https://horaedb.apache.org/docs/user-guide/sql/ddl/drop_table/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://horaedb.apache.org/docs/user-guide/sql/ddl/drop_table/</guid><description>Basic syntax Basic syntax:
DROP TABLE [IF EXISTS] table_name Drop Table removes a specific table. This statement should be used with caution, because it removes both the table definition and table data, and this removal is not recoverable.</description></item><item><title>Go</title><link>https://horaedb.apache.org/docs/user-guide/sdk/go/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://horaedb.apache.org/docs/user-guide/sdk/go/</guid><description>Installation go get github.com/apache/incubator-horaedb-client-go You can get latest version here.
How To Use Init HoraeDB Client client, err := horaedb.NewClient(endpoint, horaedb.Direct, horaedb.WithDefaultDatabase(&amp;#34;public&amp;#34;), ) option name description defaultDatabase using database, database can be overwritten by ReqContext in single Write or SQLRequest RPCMaxRecvMsgSize configration for grpc MaxCallRecvMsgSize, default 1024 _ 1024 _ 1024 RouteMaxCacheSize If the maximum number of router cache size, router client whill evict oldest if exceeded, default is 10000 Notice:</description></item><item><title>InfluxDB</title><link>https://horaedb.apache.org/docs/user-guide/ecosystem/influxdb/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://horaedb.apache.org/docs/user-guide/ecosystem/influxdb/</guid><description>InfluxDB is a time series database designed to handle high write and query loads. It is an integral component of the TICK stack. InfluxDB is meant to be used as a backing store for any use case involving large amounts of timestamped data, including DevOps monitoring, application metrics, IoT sensor data, and real-time analytics.
HoraeDB support InfluxDB v1.8 write and query API.
Warn: users need to add following config to server&amp;rsquo;s config in order to try InfluxDB write/query.</description></item><item><title>INSERT</title><link>https://horaedb.apache.org/docs/user-guide/sql/dml/insert/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://horaedb.apache.org/docs/user-guide/sql/dml/insert/</guid><description>Basic syntax Basic syntax:
INSERT [INTO] tbl_name [(col_name [, col_name] ...)] { {VALUES | VALUE} (value_list) [, (value_list)] ... } INSERT inserts new rows into a HoraeDB table. Here is an example:
INSERT INTO demo(`time_stammp`, tag1) VALUES(1667374200022, &amp;#39;horaedb&amp;#39;)</description></item><item><title>Introduction to Architecture of HoraeDB Cluster</title><link>https://horaedb.apache.org/docs/design/clustering/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://horaedb.apache.org/docs/design/clustering/</guid><description>Note: Some of the features mentioned in the article have not yet been implemented.
Overview ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îÇ ‚îÇ ‚îÇ HoraeMeta Cluster ‚îÇ ‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚ñ≤ ‚ñ≤ ‚ñ≤ ‚îÇ ‚îÇ ‚îÇ ‚îÇ ‚îÇ ‚îÇ ‚ñº ‚ñº ‚ñº ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îêRoute Info ‚îåHoraeDB‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚î¨‚îÄ‚îê ‚îåHoraeDB‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚î¨‚îÄ‚îê ‚îåHoraeDB‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚î¨‚îÄ‚îê ‚îÇclient ‚îÇ‚óÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñ∂ ‚îÇ ‚îÇ ‚îÇTableN‚îÇ‚îÇ ‚îÇ ‚îÇ ‚îÇ ‚îÇTableN‚îÇ‚îÇ ‚îÇ ‚îÇ ‚îÇ ‚îÇTableN‚îÇ‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îòWrite/Query‚îî‚îÄ‚îÄShard(L)‚îÄ‚îÄ‚î¥‚î¥‚îÄ‚îò ‚îî‚îÄ‚îÄShard(F)‚îÄ‚îÄ‚î¥‚î¥‚îÄ‚îò ‚îî‚îÄ‚îÄShard(F)‚îÄ‚îÄ‚î¥‚î¥‚îÄ‚îò ‚ñ≤ ‚îÇ ‚ñ≤ ‚ñ≤ ‚îÇ ‚îÇ ‚îÇ ‚îÇ Write‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îú‚îÄ‚îÄ‚îÄ‚îÄSync‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îÇ ‚îÇ ‚îÇ ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚ñº‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê Upload/Download ‚îÇ ‚îÇ ‚îÇ ‚îÇ SST ‚îÇ ‚îÇWAL ‚îÇRegion N ‚îÇ ‚îÇ ‚îÇService ‚îÇ ‚îÇ ‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚ñº ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îÇ ‚îÇ ‚îÇ Object Storage ‚îÇ ‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò The diagram above describes the architecture of a HoraeDB cluster, where some key concepts need to be explained:</description></item><item><title>Introduction to HoraeDB's Architecture</title><link>https://horaedb.apache.org/docs/design/architecture/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://horaedb.apache.org/docs/design/architecture/</guid><description>Target Provide the overview of HoraeDB to the developers who want to know more about HoraeDB but have no idea where to start. Make a brief introduction to the important modules of HoraeDB and the connections between these modules but details about their implementations are not be involved. Motivation HoraeDB is a timeseries database (TSDB). However, HoraeDB&amp;rsquo;s goal is to handle both timeseries and analytic workloads compared with the classic TSDB, which usually have a poor performance in handling analytic workloads.</description></item><item><title>Java</title><link>https://horaedb.apache.org/docs/user-guide/sdk/java/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://horaedb.apache.org/docs/user-guide/sdk/java/</guid><description>Introduction HoraeDB Client is a high-performance Java client for HoraeDB.
Requirements Java 8 or later is required for compilation Dependency &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;io.ceresdb&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;ceresdb-all&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${CERESDB.VERSION}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; You can get latest version here.
Init HoraeDB Client final CeresDBOptions opts = CeresDBOptions.newBuilder(&amp;#34;127.0.0.1&amp;#34;, 8831, DIRECT) // CeresDB default grpc port 8831Ôºåuse DIRECT RouteMode .database(&amp;#34;public&amp;#34;) // use database for client, can be overridden by the RequestContext in request // maximum retry times when write fails // (only some error codes will be retried, such as the routing table failure) .</description></item><item><title>Observability</title><link>https://horaedb.apache.org/docs/user-guide/operation/observability/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://horaedb.apache.org/docs/user-guide/operation/observability/</guid><description>HoraeDB is observable with Prometheus and Grafana.
Prometheus Prometheus is a systems and service monitoring system.
Configuration Save the following configuration into the prometheus.yml file. For example, in the tmp directory, /tmp/prometheus.yml.
Two HoraeDB http service are started on localhost:5440 and localhost:5441.
global: scrape_interval: 30s scrape_configs: - job_name: horaedb-server static_configs: - targets: [your_ip:5440, your_ip:5441] labels: env: horaedbcluster See details about configuration here.
Run You can use docker to start Prometheus. The docker image information is here.</description></item><item><title>OpenTSDB</title><link>https://horaedb.apache.org/docs/user-guide/ecosystem/opentsdb/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://horaedb.apache.org/docs/user-guide/ecosystem/opentsdb/</guid><description>OpenTSDB is a distributed and scalable time series database based on HBase.
Write HoraeDB follows the OpenTSDB put write protocol.
summary and detailed are not yet supported.
curl --location &amp;#39;http://localhost:5440/opentsdb/api/put&amp;#39; \ --header &amp;#39;Content-Type: application/json&amp;#39; \ -d &amp;#39;[{ &amp;#34;metric&amp;#34;: &amp;#34;sys.cpu.nice&amp;#34;, &amp;#34;timestamp&amp;#34;: 1692588459000, &amp;#34;value&amp;#34;: 18, &amp;#34;tags&amp;#34;: { &amp;#34;host&amp;#34;: &amp;#34;web01&amp;#34;, &amp;#34;dc&amp;#34;: &amp;#34;lga&amp;#34; } }, { &amp;#34;metric&amp;#34;: &amp;#34;sys.cpu.nice&amp;#34;, &amp;#34;timestamp&amp;#34;: 1692588459000, &amp;#34;value&amp;#34;: 18, &amp;#34;tags&amp;#34;: { &amp;#34;host&amp;#34;: &amp;#34;web01&amp;#34; } }]&amp;#39; &amp;#39; Metric will be mapped to table in HoraeDB, and it will be created automatically in first write(Note: The default TTL is 7d, and points written exceed TTL will be discarded directly).</description></item><item><title>Profiling</title><link>https://horaedb.apache.org/docs/dev/profiling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://horaedb.apache.org/docs/dev/profiling/</guid><description>CPU profiling HoraeDB provides cpu profiling http api debug/profile/cpu.
Example:
// 60s cpu sampling data curl 0:5000/debug/profile/cpu/60 // Output file path. /tmp/flamegraph_cpu.svg Heap profiling HoraeDB provides heap profiling http api debug/profile/heap.
Install dependencies sudo yum install -y jemalloc-devel ghostscript graphviz Example:
// enable malloc prof export MALLOC_CONF=prof:true // run horaedb-server ./horaedb-server .... // 60s cpu sampling data curl -L &amp;#39;0:5000/debug/profile/heap/60&amp;#39; &amp;gt; /tmp/heap_profile jeprof --show_bytes --pdf /usr/bin/horaedb-server /tmp/heap_profile &amp;gt; profile_heap.pdf jeprof --show_bytes --svg /usr/bin/horaedb-server /tmp/heap_profile &amp;gt; profile_heap.</description></item><item><title>Prometheus</title><link>https://horaedb.apache.org/docs/user-guide/ecosystem/prometheus/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://horaedb.apache.org/docs/user-guide/ecosystem/prometheus/</guid><description>Prometheus is a popular cloud-native monitoring tool that is widely adopted by organizations due to its scalability, reliability, and scalability. It is used to scrape metrics from cloud-native services, such as Kubernetes and OpenShift, and stores it in a time-series database. Prometheus is also easily extensible, allowing users to extend its features and capabilities with other databases.
HoraeDB can be used as a long-term storage solution for Prometheus. Both remote read and remote write API are supported.</description></item><item><title>Python</title><link>https://horaedb.apache.org/docs/user-guide/sdk/python/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://horaedb.apache.org/docs/user-guide/sdk/python/</guid><description>Introduction horaedb-client is the python client for HoraeDB.
Thanks to PyO3, the python client is actually a wrapper on the rust client.
The guide will give a basic introduction to the python client by example.
Requirements Python &amp;gt;= 3.7 Installation pip install ceresdb-client You can get latest version here.
Init HoraeDB Client The client initialization comes first, here is a code snippet:
import asyncio import datetime from ceresdb_client import Builder, RpcContext, PointBuilder, ValueBuilder, WriteRequest, SqlQueryRequest, Mode, RpcConfig rpc_config = RpcConfig() rpc_config = RpcConfig() rpc_config.</description></item><item><title>Rationale and Goals</title><link>https://horaedb.apache.org/docs/dev/style_guide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://horaedb.apache.org/docs/dev/style_guide/</guid><description>As every Rust programmer knows, the language has many powerful features, and there are often several patterns which can express the same idea. Also, as every professional programmer comes to discover, code is almost always read far more than it is written.
Thus, we choose to use a consistent set of idioms throughout our code so that it is easier to read and understand for both existing and new contributors.</description></item><item><title>RoadMap</title><link>https://horaedb.apache.org/docs/dev/roadmap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://horaedb.apache.org/docs/dev/roadmap/</guid><description>v0.1.0 Standalone version, local storage Analytical storage format Support SQL v0.2.0 Distributed version supports static topology defined in config file. The underlying storage supports Aliyun OSS. WAL implementation based on OBKV. v0.3.0 Release multi-language clients, including Java, Rust and Python. Static cluster mode with HoraeMeta. Basic implementation of hybrid storage format. v0.4.0 Implement more sophisticated cluster solution that enhances reliability and scalability of HoraeDB. Set up nightly benchmark with TSBS. v1.</description></item><item><title>Rust</title><link>https://horaedb.apache.org/docs/user-guide/sdk/rust/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://horaedb.apache.org/docs/user-guide/sdk/rust/</guid><description>Install cargo add ceresdb-client You can get latest version here.
Init Client At first, we need to init the client.
New builder for the client, and you must set endpoint and mode: endpoint is a string which is usually like &amp;ldquo;ip/domain_name:port&amp;rdquo;. mode is used to define the way to access horaedb server, detail about mode. let mut builder = Builder::new(&amp;#34;ip/domain_name:port&amp;#34;, Mode::Direct/Mode::Proxy); New and set rpc_config, it can be defined on demand or just use the default value, detail about rpc config: let rpc_config = RpcConfig { thread_num: Some(1), default_write_timeout: Duration::from_millis(1000), .</description></item><item><title>SDK Development</title><link>https://horaedb.apache.org/docs/dev/sdk_develop/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://horaedb.apache.org/docs/dev/sdk_develop/</guid><description>Rust git clone https://github.com/apache/horaedb-client-rs cargo build Python Requirements python 3.7+ The Python SDK rely on Rust SDK, so cargo is also required, then install build tool maturin:
pip install maturin Then we can build Python SDK:
git clone https://github.com/apache/horaedb-client-py maturin build Go git clone https://github.com/apache/horaedb-client-go go build ./... Java Requirements java 1.8 maven 3.6.3+ git clone https://github.com/apache/horaedb-client-java mvn clean install -DskipTests=true -Dmaven.javadoc.skip=true -B -V</description></item><item><title>SELECT</title><link>https://horaedb.apache.org/docs/user-guide/sql/dml/select/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://horaedb.apache.org/docs/user-guide/sql/dml/select/</guid><description>Basic syntax Basic syntax (parts between [] are optional):
SELECT select_expr [, select_expr] ... FROM table_name [WHERE where_condition] [GROUP BY {col_name | expr} ... ] [ORDER BY {col_name | expr} [ASC | DESC] [LIMIT [offset,] row_count ] Select syntax in HoraeDB is similar to mysql, here is an example:
SELECT * FROM `demo` WHERE time_stamp &amp;gt; &amp;#39;2022-10-11 00:00:00&amp;#39; AND time_stamp &amp;lt; &amp;#39;2022-10-12 00:00:00&amp;#39; LIMIT 10</description></item><item><title>Special Columns</title><link>https://horaedb.apache.org/docs/user-guide/sql/model/special_columns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://horaedb.apache.org/docs/user-guide/sql/model/special_columns/</guid><description>Tables in HoraeDB have the following constraints:
Primary key is required The primary key must contain a time column, and can only contain one time column The primary key must be non-null, so all columns in primary key must be non-null. Timestamp Column Tables in HoraeDB must have one timestamp column maps to timestamp in timeseries data, such as timestamp in OpenTSDB/Prometheus. The timestamp column can be set with timestamp key keyword, like TIMESTAMP KEY(ts).</description></item><item><title>Storage</title><link>https://horaedb.apache.org/docs/design/storage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://horaedb.apache.org/docs/design/storage/</guid><description>The storage engine mainly provides the following two functionsÔºö
Persistence of data Under the premise of ensuring the correctness of the data, organize the data in the most reasonable way to meet the query needs of different scenarios. This document will introduce the internal implementation of the storage engine in HoraeDB. Readers can refer to the content here to explore how to use HoraeDB efficiently.
Overall Structure HoraeDB is a distributed storage system based on the share-nothing architecture.</description></item><item><title>Table Operation</title><link>https://horaedb.apache.org/docs/user-guide/operation/system_table/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://horaedb.apache.org/docs/user-guide/operation/system_table/</guid><description>Query Table Information Like Mysql&amp;rsquo;s information_schema.tables, HoraeDB provides system.public.tables to save tables information. Columns:
timestamp([TimeStamp]) catalog([String]) schema([String]) table_name([String]) table_id([Uint64]) engine([String]) Example Query table information via table_name like this:
curl --location --request POST &amp;#39;http://localhost:5000/sql&amp;#39; \ --header &amp;#39;Content-Type: application/json&amp;#39; \ -d &amp;#39;{ &amp;#34;query&amp;#34;: &amp;#34;select * from system.public.tables where `table_name`=\&amp;#34;my_table\&amp;#34;&amp;#34; }&amp;#39; Response { &amp;#34;rows&amp;#34;:[ { &amp;#34;timestamp&amp;#34;:0, &amp;#34;catalog&amp;#34;:&amp;#34;horaedb&amp;#34;, &amp;#34;schema&amp;#34;:&amp;#34;public&amp;#34;, &amp;#34;table_name&amp;#34;:&amp;#34;my_table&amp;#34;, &amp;#34;table_id&amp;#34;:3298534886446, &amp;#34;engine&amp;#34;:&amp;#34;Analytic&amp;#34; } }</description></item><item><title>Table Operation</title><link>https://horaedb.apache.org/docs/user-guide/operation/table/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://horaedb.apache.org/docs/user-guide/operation/table/</guid><description>HoraeDB supports standard SQL protocols and allows you to create tables and read/write data via http requests. More SQL
Create Table Example curl --location --request POST &amp;#39;http://127.0.0.1:5000/sql&amp;#39; \ --header &amp;#39;Content-Type: application/json&amp;#39; \ -d &amp;#39;{ &amp;#34;query&amp;#34;: &amp;#34;CREATE TABLE `demo` (`name` string TAG, `value` double NOT NULL, `t` timestamp NOT NULL, TIMESTAMP KEY(t)) ENGINE=Analytic with (enable_ttl=&amp;#39;\&amp;#39;&amp;#39;false&amp;#39;\&amp;#39;&amp;#39;)&amp;#34; }&amp;#39; Write Data Example curl --location --request POST &amp;#39;http://127.0.0.1:5000/sql&amp;#39; \ --header &amp;#39;Content-Type: application/json&amp;#39; \ -d &amp;#39;{ &amp;#34;query&amp;#34;: &amp;#34;INSERT INTO demo(t, name, value) VALUES(1651737067000, &amp;#39;\&amp;#39;&amp;#39;horaedb&amp;#39;\&amp;#39;&amp;#39;, 100)&amp;#34; }&amp;#39; Read Data Example curl --location --request POST &amp;#39;http://127.</description></item><item><title>Table Partitioning</title><link>https://horaedb.apache.org/docs/design/table_partitioning/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://horaedb.apache.org/docs/design/table_partitioning/</guid><description>Note: This feature is still in development, and the API may change in the future.
This chapter discusses PartitionTable.
The partition table syntax used by HoraeDB is similar to that of MySQL.
General partition tables include Range Partitioning, List Partitoning, Hash Partitioning, and Key Partititioning.
HoraeDB currently only supports Key Partitioning.
Architecture Similar to MySQL, different portions of a partition table are stored as separate tables in different locations.
Currently designed, a partition table can be opened on multiple HoraeDB nodes, supports writing and querying at the same time, and can be expanded horizontally.</description></item><item><title>Wal</title><link>https://horaedb.apache.org/docs/design/wal/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://horaedb.apache.org/docs/design/wal/</guid><description> WAL on RocksDB WAL on Kafka WAL on OceanBase will be introduced in later.</description></item><item><title>WAL on Kafka</title><link>https://horaedb.apache.org/docs/design/wal_on_kafka/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://horaedb.apache.org/docs/design/wal_on_kafka/</guid><description>Architecture In this section we present a distributed WAL implementation(based on Kafka). Write-ahead logs(hereinafter referred to as logs) of tables are managed here by region, which can be simply understood as a shared log file of multiple tables.
As shown in the following figure, regions are mapped to topics(with only one partition) in Kafka. And usually two topics are needed by a region, one is used for storing logs and the other is used for storing metadata.</description></item><item><title>WAL on RocksDB</title><link>https://horaedb.apache.org/docs/design/wal_on_rocksdb/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://horaedb.apache.org/docs/design/wal_on_rocksdb/</guid><description>Architecture In this section we present a standalone WAL implementation (based on RocksDB). Write-ahead logs(hereinafter referred to as logs) of tables are managed here by table, and we call the corresponding storage data structure TableUnit. All related data (logs or some metadata) is stored in a single column family for simplicity.
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îÇ HoraeDB ‚îÇ ‚îÇ ‚îÇ ‚îÇ ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îÇ ‚îÇ ‚îÇ WAL ‚îÇ ‚îÇ ‚îÇ ‚îÇ ‚îÇ ‚îÇ ‚îÇ ‚îÇ .</description></item></channel></rss>