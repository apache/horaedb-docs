<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Development on Apache HoraeDB</title><link>https://horaedb.apache.org/docs/dev/</link><description>Recent content in Development on Apache HoraeDB</description><generator>Hugo</generator><language>en</language><atom:link href="https://horaedb.apache.org/docs/dev/index.xml" rel="self" type="application/rss+xml"/><item><title>Supported Platform</title><link>https://horaedb.apache.org/docs/dev/platform/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://horaedb.apache.org/docs/dev/platform/</guid><description>作为一个开源的数据库，HoraeDB 可以部署在基于英特尔 /ARM 架构的服务器，以及常见的虚拟环境。
OS status Ubuntu LTS 16.06 or later ✅ CentOS 7.3 or later ✅ Red Hat Enterprise Linux 7.3 or later 7.x releases ✅ macOS 11 or later ✅ Windows ❌ 生产环境下 , Linux 是首选平台。 macOS 主要用在开发环境。</description></item><item><title>Conventional Commit Guide</title><link>https://horaedb.apache.org/docs/dev/conventional_commit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://horaedb.apache.org/docs/dev/conventional_commit/</guid><description>This document describes how we use conventional commit in our development.
Structure We would like to structure our commit message like this:
&amp;lt;type&amp;gt;[optional scope]: &amp;lt;description&amp;gt; There are three parts. type is used to classify which kind of work this commit does. scope is an optional field that provides additional contextual information. And the last field is your description of this commit.
Type Here we list some common types and their meanings.</description></item><item><title>Compile</title><link>https://horaedb.apache.org/docs/dev/compile_run/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://horaedb.apache.org/docs/dev/compile_run/</guid><description>In order to compile HoraeDB, some relevant dependencies(including the Rust toolchain) should be installed.
Dependencies(Ubuntu20.04) Assuming the development environment is Ubuntu20.04, execute the following command to install the required dependencies:
1 sudo apt install git curl gcc g++ libssl-dev pkg-config cmake protobuf-compiler It should be noted that the compilation of the project has version requirements for dependencies such as cmake, gcc, g++, etc. If your development environment is an old Linux distribution, it is necessary to manually install these dependencies of a higher version.</description></item><item><title>Profiling</title><link>https://horaedb.apache.org/docs/dev/profiling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://horaedb.apache.org/docs/dev/profiling/</guid><description>CPU profiling HoraeDB provides cpu profiling http api debug/profile/cpu.
Example:
// 60s cpu sampling data curl 0:5000/debug/profile/cpu/60 // Output file path. /tmp/flamegraph_cpu.svg Heap profiling HoraeDB provides heap profiling http api debug/profile/heap.
Install dependencies sudo yum install -y jemalloc-devel ghostscript graphviz Example:
// enable malloc prof export MALLOC_CONF=prof:true // run horaedb-server ./horaedb-server .... // 60s cpu sampling data curl -L &amp;#39;0:5000/debug/profile/heap/60&amp;#39; &amp;gt; /tmp/heap_profile jeprof --show_bytes --pdf /usr/bin/horaedb-server /tmp/heap_profile &amp;gt; profile_heap.pdf jeprof --show_bytes --svg /usr/bin/horaedb-server /tmp/heap_profile &amp;gt; profile_heap.</description></item><item><title>Rationale and Goals</title><link>https://horaedb.apache.org/docs/dev/style_guide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://horaedb.apache.org/docs/dev/style_guide/</guid><description>As every Rust programmer knows, the language has many powerful features, and there are often several patterns which can express the same idea. Also, as every professional programmer comes to discover, code is almost always read far more than it is written.
Thus, we choose to use a consistent set of idioms throughout our code so that it is easier to read and understand for both existing and new contributors.</description></item><item><title>RoadMap</title><link>https://horaedb.apache.org/docs/dev/roadmap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://horaedb.apache.org/docs/dev/roadmap/</guid><description>v0.1.0 Standalone version, local storage Analytical storage format Support SQL v0.2.0 Distributed version supports static topology defined in config file. The underlying storage supports Aliyun OSS. WAL implementation based on OBKV. v0.3.0 Release multi-language clients, including Java, Rust and Python. Static cluster mode with HoraeMeta. Basic implementation of hybrid storage format. v0.4.0 Implement more sophisticated cluster solution that enhances reliability and scalability of HoraeDB. Set up nightly benchmark with TSBS. v1.</description></item><item><title>SDK Development</title><link>https://horaedb.apache.org/docs/dev/sdk_develop/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://horaedb.apache.org/docs/dev/sdk_develop/</guid><description>Rust 1 2 3 git clone https://github.com/apache/horaedb-client-rs cargo build Python Requirements python 3.7+ The Python SDK rely on Rust SDK, so cargo is also required, then install build tool maturin:
1 pip install maturin Then we can build Python SDK:
1 2 3 git clone https://github.com/apache/horaedb-client-py maturin build Go 1 2 3 git clone https://github.com/apache/horaedb-client-go go build ./... Java Requirements java 1.8 maven 3.6.3+ 1 2 3 git clone https://github.com/apache/horaedb-client-java mvn clean install -DskipTests=true -Dmaven.</description></item></channel></rss>