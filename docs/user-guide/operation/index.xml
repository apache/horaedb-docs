<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Operation and Maintenance on Apache HoraeDB</title><link>https://horaedb.apache.org/docs/user-guide/operation/</link><description>Recent content in Operation and Maintenance on Apache HoraeDB</description><generator>Hugo</generator><language>en</language><atom:link href="https://horaedb.apache.org/docs/user-guide/operation/index.xml" rel="self" type="application/rss+xml"/><item><title>Block List</title><link>https://horaedb.apache.org/docs/user-guide/operation/block_list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://horaedb.apache.org/docs/user-guide/operation/block_list/</guid><description>Add block list If you want to reject query for a table, you can add table name to &amp;lsquo;read_block_list&amp;rsquo;.
Example 1 2 3 4 5 6 7 curl --location --request POST &amp;#39;http://localhost:5000/admin/block&amp;#39; \ --header &amp;#39;Content-Type: application/json&amp;#39; \ -d &amp;#39;{ &amp;#34;operation&amp;#34;:&amp;#34;Add&amp;#34;, &amp;#34;write_block_list&amp;#34;:[], &amp;#34;read_block_list&amp;#34;:[&amp;#34;my_table&amp;#34;] }&amp;#39; Response 1 2 3 4 { &amp;#34;write_block_list&amp;#34;: [], &amp;#34;read_block_list&amp;#34;: [&amp;#34;my_table&amp;#34;] } Set block list You can use set operation to clear exist tables and set new tables to &amp;lsquo;read_block_list&amp;rsquo; like following example.</description></item><item><title>Cluster Operation</title><link>https://horaedb.apache.org/docs/user-guide/operation/horaemeta/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://horaedb.apache.org/docs/user-guide/operation/horaemeta/</guid><description>The Operations for HoraeDB cluster mode, it can only be used when HoraeMeta is deployed.
Operation Interface You need to replace 127.0.0.1 with the actual project path.
Query table When tableNames is not empty, use tableNames for query. When tableNames is empty, ids are used for query. When querying with ids, schemaName is useless. curl --location &amp;#39;http://127.0.0.1:8080/api/v1/table/query&amp;#39; \ --header &amp;#39;Content-Type: application/json&amp;#39; \ -d &amp;#39;{ &amp;#34;clusterName&amp;#34;:&amp;#34;defaultCluster&amp;#34;, &amp;#34;schemaName&amp;#34;:&amp;#34;public&amp;#34;, &amp;#34;names&amp;#34;:[&amp;#34;demo1&amp;#34;, &amp;#34;__demo1_0&amp;#34;], }&amp;#39; curl --location &amp;#39;http://127.</description></item><item><title>Observability</title><link>https://horaedb.apache.org/docs/user-guide/operation/observability/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://horaedb.apache.org/docs/user-guide/operation/observability/</guid><description>HoraeDB is observable with Prometheus and Grafana.
Prometheus Prometheus is a systems and service monitoring system.
Configuration Save the following configuration into the prometheus.yml file. For example, in the tmp directory, /tmp/prometheus.yml.
Two HoraeDB http service are started on localhost:5440 and localhost:5441.
1 2 3 4 5 6 7 8 global: scrape_interval: 30s scrape_configs: - job_name: horaedb-server static_configs: - targets: [your_ip:5440, your_ip:5441] labels: env: horaedbcluster See details about configuration here.</description></item><item><title>Table Operation</title><link>https://horaedb.apache.org/docs/user-guide/operation/system_table/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://horaedb.apache.org/docs/user-guide/operation/system_table/</guid><description>Query Table Information Like Mysql&amp;rsquo;s information_schema.tables, HoraeDB provides system.public.tables to save tables information. Columns:
timestamp([TimeStamp]) catalog([String]) schema([String]) table_name([String]) table_id([Uint64]) engine([String]) Example Query table information via table_name like this:
1 2 3 4 5 curl --location --request POST &amp;#39;http://localhost:5000/sql&amp;#39; \ --header &amp;#39;Content-Type: application/json&amp;#39; \ -d &amp;#39;{ &amp;#34;query&amp;#34;: &amp;#34;select * from system.public.tables where `table_name`=\&amp;#34;my_table\&amp;#34;&amp;#34; }&amp;#39; Response 1 2 3 4 5 6 7 8 9 10 11 { &amp;#34;rows&amp;#34;:[ { &amp;#34;timestamp&amp;#34;:0, &amp;#34;catalog&amp;#34;:&amp;#34;horaedb&amp;#34;, &amp;#34;schema&amp;#34;:&amp;#34;public&amp;#34;, &amp;#34;table_name&amp;#34;:&amp;#34;my_table&amp;#34;, &amp;#34;table_id&amp;#34;:3298534886446, &amp;#34;engine&amp;#34;:&amp;#34;Analytic&amp;#34; } }</description></item><item><title>Table Operation</title><link>https://horaedb.apache.org/docs/user-guide/operation/table/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://horaedb.apache.org/docs/user-guide/operation/table/</guid><description>HoraeDB supports standard SQL protocols and allows you to create tables and read/write data via http requests. More SQL
Create Table Example 1 2 3 4 5 curl --location --request POST &amp;#39;http://127.0.0.1:5000/sql&amp;#39; \ --header &amp;#39;Content-Type: application/json&amp;#39; \ -d &amp;#39;{ &amp;#34;query&amp;#34;: &amp;#34;CREATE TABLE `demo` (`name` string TAG, `value` double NOT NULL, `t` timestamp NOT NULL, TIMESTAMP KEY(t)) ENGINE=Analytic with (enable_ttl=&amp;#39;\&amp;#39;&amp;#39;false&amp;#39;\&amp;#39;&amp;#39;)&amp;#34; }&amp;#39; Write Data Example 1 2 3 4 5 curl --location --request POST &amp;#39;http://127.</description></item></channel></rss>