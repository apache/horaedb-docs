<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Technical and Design on Apache HoraeDB</title><link>https://horaedb.apache.org/docs/design/</link><description>Recent content in Technical and Design on Apache HoraeDB</description><generator>Hugo</generator><language>en</language><atom:link href="https://horaedb.apache.org/docs/design/index.xml" rel="self" type="application/rss+xml"/><item><title>Introduction to Architecture of HoraeDB Cluster</title><link>https://horaedb.apache.org/docs/design/clustering/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://horaedb.apache.org/docs/design/clustering/</guid><description>Note: Some of the features mentioned in the article have not yet been implemented.
Overview ┌───────────────────────────────────────────────────────────────────────┐ │ │ │ HoraeMeta Cluster │ │ │ └───────────────────────────────────────────────────────────────────────┘ ▲ ▲ ▲ │ │ │ │ │ │ ▼ ▼ ▼ ┌───────┐Route Info ┌HoraeDB─────┬┬─┐ ┌HoraeDB─────┬┬─┐ ┌HoraeDB─────┬┬─┐ │client │◀────────▶ │ │ │TableN││ │ │ │ │TableN││ │ │ │ │TableN││ │ └───────┘Write/Query└──Shard(L)──┴┴─┘ └──Shard(F)──┴┴─┘ └──Shard(F)──┴┴─┘ ▲ │ ▲ ▲ │ │ │ │ Write─────────┐ ├────Sync───────┘ │ │ │ ┌────────┬▼───┴────┬──────────────────┐ Upload/Download │ │ │ │ SST │ │WAL │Region N │ │ │Service │ │ │ │ └────────┴─────────┴──────────────────┘ ▼ ┌───────────────────────────────────────────────────────────────────────┐ │ │ │ Object Storage │ │ │ └───────────────────────────────────────────────────────────────────────┘ The diagram above describes the architecture of a HoraeDB cluster, where some key concepts need to be explained:</description></item><item><title>Introduction to HoraeDB's Architecture</title><link>https://horaedb.apache.org/docs/design/architecture/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://horaedb.apache.org/docs/design/architecture/</guid><description>Target Provide the overview of HoraeDB to the developers who want to know more about HoraeDB but have no idea where to start. Make a brief introduction to the important modules of HoraeDB and the connections between these modules but details about their implementations are not be involved. Motivation HoraeDB is a timeseries database (TSDB). However, HoraeDB&amp;rsquo;s goal is to handle both timeseries and analytic workloads compared with the classic TSDB, which usually have a poor performance in handling analytic workloads.</description></item><item><title>Storage</title><link>https://horaedb.apache.org/docs/design/storage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://horaedb.apache.org/docs/design/storage/</guid><description>The storage engine mainly provides the following two functions：
Persistence of data Under the premise of ensuring the correctness of the data, organize the data in the most reasonable way to meet the query needs of different scenarios. This document will introduce the internal implementation of the storage engine in HoraeDB. Readers can refer to the content here to explore how to use HoraeDB efficiently.
Overall Structure HoraeDB is a distributed storage system based on the share-nothing architecture.</description></item><item><title>Table Partitioning</title><link>https://horaedb.apache.org/docs/design/table_partitioning/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://horaedb.apache.org/docs/design/table_partitioning/</guid><description>Note: This feature is still in development, and the API may change in the future.
This chapter discusses PartitionTable.
The partition table syntax used by HoraeDB is similar to that of MySQL.
General partition tables include Range Partitioning, List Partitoning, Hash Partitioning, and Key Partititioning.
HoraeDB currently only supports Key Partitioning.
Architecture Similar to MySQL, different portions of a partition table are stored as separate tables in different locations.
Currently designed, a partition table can be opened on multiple HoraeDB nodes, supports writing and querying at the same time, and can be expanded horizontally.</description></item><item><title>Wal</title><link>https://horaedb.apache.org/docs/design/wal/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://horaedb.apache.org/docs/design/wal/</guid><description> WAL on RocksDB WAL on Kafka WAL on OceanBase will be introduced in later.</description></item><item><title>WAL on Kafka</title><link>https://horaedb.apache.org/docs/design/wal_on_kafka/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://horaedb.apache.org/docs/design/wal_on_kafka/</guid><description>Architecture In this section we present a distributed WAL implementation(based on Kafka). Write-ahead logs(hereinafter referred to as logs) of tables are managed here by region, which can be simply understood as a shared log file of multiple tables.
As shown in the following figure, regions are mapped to topics(with only one partition) in Kafka. And usually two topics are needed by a region, one is used for storing logs and the other is used for storing metadata.</description></item><item><title>WAL on RocksDB</title><link>https://horaedb.apache.org/docs/design/wal_on_rocksdb/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://horaedb.apache.org/docs/design/wal_on_rocksdb/</guid><description>Architecture In this section we present a standalone WAL implementation (based on RocksDB). Write-ahead logs(hereinafter referred to as logs) of tables are managed here by table, and we call the corresponding storage data structure TableUnit. All related data (logs or some metadata) is stored in a single column family for simplicity.
┌───────────────────────────────┐ │ HoraeDB │ │ │ │ ┌─────────────────────┐ │ │ │ WAL │ │ │ │ │ │ │ │ .</description></item></channel></rss>