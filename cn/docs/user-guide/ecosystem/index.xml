<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>周边生态 on Apache HoraeDB</title><link>https://horaedb.apache.org/cn/docs/user-guide/ecosystem/</link><description>Recent content in 周边生态 on Apache HoraeDB</description><generator>Hugo</generator><language>cn</language><atom:link href="https://horaedb.apache.org/cn/docs/user-guide/ecosystem/index.xml" rel="self" type="application/rss+xml"/><item><title>InfluxDB</title><link>https://horaedb.apache.org/cn/docs/user-guide/ecosystem/influxdb/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://horaedb.apache.org/cn/docs/user-guide/ecosystem/influxdb/</guid><description>InfluxDB 是一个时间序列数据库，旨在处理高写入和查询负载。它是 TICK 堆栈的一个组成部分。InfluxDB 旨在用作涉及大量时间戳数据的任何用例的后备存储，包括 DevOps 监控、应用程序指标、物联网传感器数据和实时分析。
HoraeDB 支持 InfluxDB v1.8 写入和查询 API。
注意：用户需要将以下配置添加到服务器的配置中才能尝试 InfluxDB 写入/查询。
[server.default_schema_config] default_timestamp_column_name = &amp;#34;time&amp;#34; 写入 curl -i -XPOST &amp;#34;http://localhost:5440/influxdb/v1/write&amp;#34; --data-binary &amp;#39; demo,tag1=t1,tag2=t2 field1=90,field2=100 1679994647000 demo,tag1=t1,tag2=t2 field1=91,field2=101 1679994648000 demo,tag1=t11,tag2=t22 field1=90,field2=100 1679994647000 demo,tag1=t11,tag2=t22 field1=91,field2=101 1679994648000 &amp;#39; Post 的内容采用的是 InfluxDB line protocol 格式。
measurement 将映射到 HoraeDB 中的一个表，在首次写入时 server 会自动进行建表(注意：创建表的 TTL 是 7d，写入超过当前周期数据会被丢弃)。
例如，在上面插入数据时，HoraeDB 中将创建下表：
CREATE TABLE `demo` ( `tsid` uint64 NOT NULL, `time` timestamp NOT NULL, `field1` double, `field2` double, `tag1` string TAG, `tag2` string TAG, PRIMARY KEY (tsid, time), timestamp KEY (time)) 注意事项 InfluxDB 在写入时，时间戳精度默认是纳秒，HoraeDB 只支持毫秒级时间戳，用户可以通过 precision 参数指定数据精度，HoraeDB 内部会自动转成毫秒精度。 暂时不支持诸如 db 等查询参数 查询 1 curl -G &amp;#39;http://localhost:5440/influxdb/v1/query&amp;#39; --data-urlencode &amp;#39;q=SELECT * FROM &amp;#34;demo&amp;#34;&amp;#39; 查询结果和 InfluxDB 查询接口一致：</description></item><item><title>OpenTSDB</title><link>https://horaedb.apache.org/cn/docs/user-guide/ecosystem/opentsdb/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://horaedb.apache.org/cn/docs/user-guide/ecosystem/opentsdb/</guid><description>OpenTSDB 是基于 HBase 的分布式、可伸缩的时间序列数据库。
写入 HoraeDB 遵循 OpenTSDB put 写入接口。
summary 和 detailed 还未支持。
curl --location &amp;#39;http://localhost:5440/opentsdb/api/put&amp;#39; \ --header &amp;#39;Content-Type: application/json&amp;#39; \ -d &amp;#39;[{ &amp;#34;metric&amp;#34;: &amp;#34;sys.cpu.nice&amp;#34;, &amp;#34;timestamp&amp;#34;: 1692588459000, &amp;#34;value&amp;#34;: 18, &amp;#34;tags&amp;#34;: { &amp;#34;host&amp;#34;: &amp;#34;web01&amp;#34;, &amp;#34;dc&amp;#34;: &amp;#34;lga&amp;#34; } }, { &amp;#34;metric&amp;#34;: &amp;#34;sys.cpu.nice&amp;#34;, &amp;#34;timestamp&amp;#34;: 1692588459000, &amp;#34;value&amp;#34;: 18, &amp;#34;tags&amp;#34;: { &amp;#34;host&amp;#34;: &amp;#34;web01&amp;#34; } }]&amp;#39; metric 将映射到 HoraeDB 中的一个表，在首次写入时 server 会自动进行建表(注意：创建表的 TTL 是 7d，写入超过当前周期数据会被丢弃)。
例如，在上面插入数据时，HoraeDB 中将创建下表：
CREATE TABLE `sys.cpu.nice`( `tsid` uint64 NOT NULL, `timestamp` timestamp NOT NULL, `dc` string TAG, `host` string TAG, `value` bigint, PRIMARY KEY(tsid, timestamp), TIMESTAMP KEY(timestamp)) ENGINE = Analytic WITH(arena_block_size = &amp;#39;2097152&amp;#39;, compaction_strategy = &amp;#39;default&amp;#39;, compression = &amp;#39;ZSTD&amp;#39;, enable_ttl = &amp;#39;true&amp;#39;, num_rows_per_row_group = &amp;#39;8192&amp;#39;, segment_duration = &amp;#39;2h&amp;#39;, storage_format = &amp;#39;AUTO&amp;#39;, ttl = &amp;#39;7d&amp;#39;, update_mode = &amp;#39;OVERWRITE&amp;#39;, write_buffer_size = &amp;#39;33554432&amp;#39;) 查询 暂不支持 OpenTSDB 查询，tracking issue。</description></item><item><title>Prometheus</title><link>https://horaedb.apache.org/cn/docs/user-guide/ecosystem/prometheus/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://horaedb.apache.org/cn/docs/user-guide/ecosystem/prometheus/</guid><description>Prometheus是一个流行的云原生监控工具，由于其可扩展性、可靠性和可伸缩性，被企业广泛采用。它用于从云原生服务（如 Kubernetes 和 OpenShift）中获取指标，并将其存储在时序数据库中。Prometheus 也很容易扩展，允许用户用其他数据库扩展其特性和功能。
HoraeDB 可以作为 Prometheus 的长期存储解决方案，同时支持远程读取和远程写入 API。
配置 你可以通过在prometheus.yml中添加以下几行来配置 Prometheus 使用 HoraeDB 作为一个远程存储：
1 2 3 4 remote_write: - url: &amp;#34;http://&amp;lt;address&amp;gt;:&amp;lt;http_port&amp;gt;/prom/v1/write&amp;#34; remote_read: - url: &amp;#34;http://&amp;lt;address&amp;gt;:&amp;lt;http_port&amp;gt;/prom/v1/read&amp;#34; 每一个指标都会对应一个 HoraeDB 中的表：
标签（labels）对应字符串类型的 tag 列 数据的时间戳对应一个 timestamp 类型的 timestmap 列 数据的值对应一个双精度浮点数类型的 value 列 比如有如下 Prometheus 指标：
up{env=&amp;#34;dev&amp;#34;, instance=&amp;#34;127.0.0.1:9090&amp;#34;, job=&amp;#34;prometheus-server&amp;#34;} 对应 HoraeDB 中如下的表(注意：创建表的 TTL 是 7d，写入超过当前周期数据会被丢弃)：
CREATE TABLE `up` ( `timestamp` timestamp NOT NULL, `tsid` uint64 NOT NULL, `env` string TAG, `instance` string TAG, `job` string TAG, `value` double, PRIMARY KEY (tsid, timestamp), timestamp KEY (timestamp) ); SELECT * FROM up; tsid timestamp env instance job value 12683162471309663278 1675824740880 dev 127.</description></item></channel></rss>