<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>SDK 文档 on Apache HoraeDB</title><link>https://horaedb.apache.org/cn/docs/user-guide/sdk/</link><description>Recent content in SDK 文档 on Apache HoraeDB</description><generator>Hugo</generator><language>cn</language><atom:link href="https://horaedb.apache.org/cn/docs/user-guide/sdk/index.xml" rel="self" type="application/rss+xml"/><item><title>Go</title><link>https://horaedb.apache.org/cn/docs/user-guide/sdk/go/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://horaedb.apache.org/cn/docs/user-guide/sdk/go/</guid><description>安装 go get github.com/apache/incubator-horaedb-client-go 你可以在这里找到最新的版本 here.
如何使用 初始化客户端 1 2 3 client, err := horaedb.NewClient(endpoint, horaedb.Direct, horaedb.WithDefaultDatabase(&amp;#34;public&amp;#34;), // Client所使用的database ) 参数名称 说明 defaultDatabase 所使用的 database，可以被单个 Write 或者 SQLRequest 请求中的 database 覆盖 RPCMaxRecvMsgSize grpc MaxCallRecvMsgSize 配置, 默认是 1024 _ 1024 _ 1024 RouteMaxCacheSize 如果 router 客户端中的 路由缓存超过了这个值，将会淘汰最不活跃的直至降低这个阈值, 默认是 10000 注意： HoraeDB 当前仅支持预创建的 public database , 未来会支持多个 database。
管理表 HoraeDB 使用 SQL 来管理表格，比如创建表、删除表或者新增列等等，这和你在使用 SQL 管理其他的数据库时没有太大的区别。
为了方便使用，在使用 gRPC 的 write 接口进行写入时，如果某个表不存在，HoraeDB 会根据第一次的写入自动创建一个表。
当然你也可以通过 create table 语句来更精细化的管理的表（比如添加索引等）。</description></item><item><title>Java</title><link>https://horaedb.apache.org/cn/docs/user-guide/sdk/java/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://horaedb.apache.org/cn/docs/user-guide/sdk/java/</guid><description>介绍 HoraeDBClient 是 HoraeDB 的高性能 Java 版客户端。
环境要求 Java 8 及以上
依赖 1 2 3 4 5 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;io.ceresdb&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;ceresdb-all&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${CERESDB.VERSION}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; 最新的版本可以从这里获取。
初始化客户端 1 2 3 4 5 6 7 8 9 10 11 // CeresDB options final CeresDBOptions opts = CeresDBOptions.newBuilder(&amp;#34;127.0.0.1&amp;#34;, 8831, DIRECT) // 默认 gprc 端口号，DIRECT 模式 .database(&amp;#34;public&amp;#34;) // Client所使用的database，可被RequestContext的database覆盖 .writeMaxRetries(1) // 写入失败重试次数上限（只有部分错误 code 才会重试，比如路由表失效） .readMaxRetries(1) // 查询失败重试次数上限（只有部分错误 code 才会重试，比如路由表失效） .build(); final CeresDBClient client = new CeresDBClient(); if (!</description></item><item><title>Python</title><link>https://horaedb.apache.org/cn/docs/user-guide/sdk/python/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://horaedb.apache.org/cn/docs/user-guide/sdk/python/</guid><description>介绍 horaedb-client 是 HoraeDB python 客户端.
借助于 PyO3，python 客户端的实现实际上是基于 rust 客户端 的封装。
本手册将会介绍 python client 的一些基本用法，其中涉及到的完整示例，可以查看该示例代码.
环境要求 Python &amp;gt;= 3.7 安装 1 pip install ceresdb-client 你可以在这里找到最新的版本 here.
初始化客户端 首先介绍下如何初始化客户端，代码示例如下：
1 2 3 4 5 6 7 8 9 10 11 12 13 import asyncio import datetime from ceresdb_client import Builder, RpcContext, PointBuilder, ValueBuilder, WriteRequest, SqlQueryRequest, Mode, RpcConfig rpc_config = RpcConfig() rpc_config = RpcConfig() rpc_config.thread_num = 1 rpc_config.default_write_timeout_ms = 1000 builder = Builder(&amp;#39;127.</description></item><item><title>Rust</title><link>https://horaedb.apache.org/cn/docs/user-guide/sdk/rust/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://horaedb.apache.org/cn/docs/user-guide/sdk/rust/</guid><description>安装 1 cargo add ceresdb-client 你可以在这里找到最新的版本 here.
初始化客户端 首先，我们需要初始化客户端。
创建客户端的 builder，你必须设置 endpoint 和 mode： endpoint 是类似 &amp;ldquo;ip/domain_name:port&amp;rdquo; 形式的字符串。 mode 用于指定访问 HoraeDB 服务器的方式，关于 mode 的详细信息。 1 let mut builder = Builder::new(&amp;#34;ip/domain_name:port&amp;#34;, Mode::Direct/Mode::Proxy); 创建和设置 rpc_config，可以按需进行定义或者直接使用默认值，更多详细参数请参考这里： 1 2 3 4 5 6 let rpc_config = RpcConfig { thread_num: Some(1), default_write_timeout: Duration::from_millis(1000), ..Default::default() }; let builder = builder.rpc_config(rpc_config); 设置 default_database，这会在执行 RPC 请求时未通过 RpcContext 设置 database 的情况下，将被作为目标 database 使用。 1 let builder = builder.default_database(&amp;#34;public&amp;#34;); 最后，我们从 builder 中创建客户端： 1 let client = builder.</description></item></channel></rss>